name: ML Model Training and Validation

on:
    push:
        branches: [main, develop]
        paths:
            - "MLProject/**"
            - "dataset_preprocessing/**"
            - ".github/workflows/**"
    pull_request:
        branches: [main]
    schedule:
        - cron: "0 2 * * *"
    workflow_dispatch:

jobs:
    train-model:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.9"

            - name: Cache pip dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('MLProject/conda.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r MLProject/requirements.txt || echo "No requirements.txt found"
                  pip install mlflow>=2.0.0 scikit-learn>=1.0.0 pandas>=1.3.0 numpy>=1.21.0 matplotlib>=3.5.0 seaborn>=0.11.0 pathlib2

            - name: Verify installation
              run: |
                  python -c "import mlflow, sklearn, pandas, numpy; print('‚úÖ All packages loaded successfully!')"

            - name: Run model training
              run: |
                  cd MLProject
                  python modelling.py --data ../dataset_preprocessing/diabetes_preprocessed.csv --min-accuracy 0.7

            - name: Upload MLflow artifacts
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: mlflow-artifacts
                  path: MLProject/mlruns/
                  retention-days: 30

            - name: Model validation
              run: |
                  cd MLProject
                  python - <<'PYCODE'
                  import mlflow, pandas as pd, sys
                  print("üöÄ Starting model validation...")
                  mlflow.set_tracking_uri("file:./mlruns")
                  try:
                      exp = mlflow.get_experiment_by_name("diabetes-basic")
                      if exp is None:
                          print("‚ùå Experiment not found"); sys.exit(1)
                      runs = mlflow.search_runs(experiment_ids=[exp.experiment_id])
                      if runs.empty:
                          print("‚ùå No runs found"); sys.exit(1)
                      latest = runs.iloc[0]
                      possible = ["metrics.accuracy", "metrics.training_accuracy_score", "metrics.training_score"]
                      metric = None
                      for m in possible:
                          if m in latest:
                              try:
                                  val = float(latest[m])
                                  if not pd.isna(val):
                                      metric = m; accuracy = val; break
                              except Exception: continue
                      if metric is None:
                          print("‚ùå No accuracy metric found"); sys.exit(1)
                      print(f"‚úÖ Found {metric}: {accuracy:.4f}")
                      min_acc = 0.70
                      if accuracy >= min_acc:
                          print(f"üéØ Model PASSED validation ({accuracy:.4f} >= {min_acc})")
                      else:
                          print(f"‚ö†Ô∏è Model FAILED validation ({accuracy:.4f} < {min_acc})"); sys.exit(1)
                  except Exception as e:
                      print(f"‚ùå Validation error: {e}"); sys.exit(1)
                  PYCODE

            - name: Upload training logs
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: training-logs
                  path: |
                      MLProject/*.png
                      MLProject/*.log
                  if-no-files-found: ignore
                  retention-days: 7

            - name: Generate summary
              if: always()
              run: |
                  echo "# ML Training Summary" > training_summary.md
                  echo "- **Date**: $(date)" >> training_summary.md
                  echo "- **Commit**: ${{ github.sha }}" >> training_summary.md
                  echo "- **Branch**: ${{ github.ref_name }}" >> training_summary.md
                  echo "- **Status**: Completed ‚úÖ" >> training_summary.md
                  cat training_summary.md

            - name: Upload summary report
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: training-summary
                  path: training_summary.md
                  retention-days: 30
